#!/usr/bin/env perl
#
# aescrypt-gui
# Copyright (C) 2025
# Terrapane Corporation
#
# This script launches the AES Crypt binary to encrypt files when directed
# by the user from the Unix-like desktop systems.
#
# usage: aescrypt-gui [FILES]...
#

use strict;

# Check to see if the specified application is available
sub IsAvailable($)
{
    my ($application) = @_;

    # If the string is empty, indicate it's not available
    if (length($application) == 0)
    {
        return 0;
    }

    return (system("which $application >/dev/null 2>&1") == 0);
}

# This function will perform the requested operation, returning the result
# and the outout from stderr
sub PerformAction(@)
{
    my ($capture_stderr, @parameters) = @_;
    my $output;

    # Escape each of the parameters
    for (my $i = 0; $i <= $#parameters; $i++)
    {
        # Copy the parameter
        my $parameter = $parameters[$i];

        # Escape single quote characters
        $parameter =~ s/'/'\\\''/g;

        # Put single quotes around the parameter
        $parameter = "'$parameter'";

        # Put the parameter back in the array
        $parameters[$i] = $parameter;
    }

    if ($capture_stderr)
    {
        $output = qx(@parameters 2>&1);
    }
    else
    {
        $output = qx(@parameters);
    }
    chomp($output);
    my $result = $?;

    return ($result, $output);
}

# Find a UTF-8 variant of a language or fallback to C.utf8
sub FindUTF8Locale($)
{
    my ($language) = @_;
    my @candidates = ("$language.UTF-8", "$language.utf8", "C.UTF-8", "C.utf8");

    # Determine what locales exist on the system
    my @locales = qx(locale -a 2>/dev/null);
    chomp @locales;

    foreach my $locale (@candidates)
    {
        return $locale if grep { $_ eq $locale } @locales;
    }

     # No UTF-8 locale found
    return undef;
}

# Ensure the user's locale is correct and set it if it not
sub CheckAndSetLocale()
{
    # Get current locale
    my $locale = $ENV{LC_ALL} || $ENV{LC_CTYPE} || $ENV{LANG} || '';

    # Check if locale is already UTF-8
    return (0, "") if ($locale =~ /UTF-?8/i);

    # If LC_ALL is set, it overrides LC_CTYPE and it's not safe to override
    if ($ENV{LC_ALL})
    {
        return (1, "Error: LC_ALL is set to a non-UTF-8 locale ($ENV{LC_ALL})");
    }

    # Extract language component (e.g., fr_FR from fr_FR.ISO88591)
    my ($language) = $locale =~ /^([a-zA-Z_]+)(?:\..*)?$/;
    $language ||= 'C';  # Default to 'C' if no language component

    # Find a UTF-8 locale for the target language
    my $utf8_locale = FindUTF8Locale($language);
    if ($utf8_locale)
    {
        $ENV{LC_CTYPE} = $utf8_locale;
        return (0, "");
    }

    return (1, "A UTF-8 locale is required to operate correctly");
}

# Try to determine the type of desktop
my $desktop = $ENV{"XDG_CURRENT_DESKTOP"};

# If desktop is KDE, use kdialog; else use zenity
my $dialog = ($desktop eq "KDE") ? "kdialog" : "zenity";
my $alternate_dialog = ($desktop eq "KDE") ? "zenity" : "kdialog";

# If the preferred dialog is not available, check the alternate
if (!IsAvailable($dialog))
{
    # Attempt to use the alternative dialog application
    $dialog = $alternate_dialog;

    # If the alternate is not available, report an error and exit
    if (!IsAvailable($dialog))
    {
        print STDERR "Neither zenity nor kdialog is installed\n";
        exit(-1);
    }
}

# Set the dialog parameters
my @input_files;
my @file_selection;
my @password_prompt;
my @password_prompt_verify;
my @error_message;
my @info_message;
if ($dialog eq "kdialog")
{
    @file_selection = ("kdialog", "--getopenfilename", "", "*", "--title", "AES Crypt (Select Files to Encrypt or Decrypt)");
    @password_prompt = ("kdialog", "--title", "AES Crypt", "--password", "Enter password");
    @password_prompt_verify = ("kdialog", "--title", "AES Crypt (Verify)", "--password", "Enter password");
    @error_message = ("kdialog", "--title", "AES Crypt", "--error");
    @info_message = ("kdialog", "--title", "AES Crypt", "--msgbox");
}
else
{
    @file_selection = ("zenity", "--file-selection", "--multiple", "--separator=\n", "--title", "AES Crypt (Select Files to Encrypt or Decrypt)");
    @password_prompt = ("zenity", "--title", "AES Crypt", "--password");
    @password_prompt_verify = ("zenity", "--title", "AES Crypt (Verify)", "--password");
    @error_message = ("zenity", "--title", "AES Crypt", "--width", "350", "--error", "--text");
    @info_message = ("zenity", "--title", "AES Crypt", "--width", "350", "--info", "--text");
}

# Ensure user's locale is set to one that uses UTF-8
(my $locale_result, my $locale_error) = CheckAndSetLocale();
if ($locale_result != 0)
{
    # If there is an error with no error text, insert a generic error string
    if (length($locale_error) == 0)
    {
        $locale_error = "Problem setting locale to UTF-8";
    }

    PerformAction(0, @error_message, $locale_error);

    exit(-1);
}

# If no arguments were given, prompt the user for files to encrypt or decrypt
if ($#ARGV == -1)
{
    my ($file_result, $files) = PerformAction(0, @file_selection);
    exit(-1) if ($file_result != 0);

    # Put the filenames into an array
    @input_files = split(/\n/, $files);

    # If the array is empty, the user selected nothing
    exit(0) if ($#input_files == -1);
}
else
{
    # Copy the filenames into @files for consistent handling
    @input_files = @ARGV;
}

# Define a variable to indicate the operating mode (encryption or decryption)
my $mode = "";

# One must either encrypt or decrypt, so check for mixed file set
{
    my $aes_files = 0;
    my $non_aes_files = 0;

    foreach my $file (@input_files)
    {
        # Check if the file ends in .aes
        if ($file =~ /\.aes$/i)
        {
            $aes_files++;
            $mode = "d";
        }
        else
        {
            $non_aes_files++;
            $mode = "e";
        }

        # Prevent mixed mode operation
        if (($aes_files > 0) && ($non_aes_files > 0))
        {
            PerformAction(0, @error_message, "Please select either .aes or non-.aes files, but not both at the same time");
            exit(-1);
        }
    }

    # Set the operating mode to encrypt or decrypt
    $mode = ($aes_files > 0) ? "d" : "e";
}

# Define the variable to store the password
my $password = "";

# Loop until user cancels the prompt or provides a password
while (1)
{
    # Prompt the user for a password
    (my $pw_result, $password) = PerformAction(0, @password_prompt);
    if ($pw_result)
    {
        # User hit cancel, so exit
        exit(0);
    }

    # If the password is empty, do not proceed
    last if (length($password) > 0);

    # Notify the user that the password is empty
    PerformAction(0, @error_message, "Password is empty");
}

# If encrypting, prompt again
if ($mode eq "e")
{
    # Prompt for the password again
    my ($verify_result, $password_verify) = PerformAction(0, @password_prompt_verify);
    if ($verify_result)
    {
        # User hit cancel
        exit(0);
    }

    # Ensure they are equal
    if ($password ne $password_verify)
    {
        PerformAction(0, @error_message, "Passwords do not match");
        exit(-1);
    }
}

# Iterate over each file to perform encryption
foreach my $file (@input_files)
{
    # Encrypt or decrypt the file
    my ($aes_result, $output) = PerformAction(1, "aescrypt", "-q", "-$mode", "-p", "$password", "$file");
    if ($aes_result)
    {
        PerformAction(0, @error_message, "$output");
        exit(-1);
    }
}

# Indicate that encryption succeeded
if ($mode eq "e")
{
    PerformAction(0, @info_message, "File encryption completed successfully");
}
else
{
    PerformAction(0, @info_message, "File decryption completed successfully");
}
